public class Unit7and8FRQs {

/*

Unit 7: ArrayList FRQ

a.) Write the constructor for the UserName class. The constructor initializes and fills possibleNames with possible
user names based on the firstName and lastName parameters. The possible user names are obtained by concatenating
lastName with different substrings of firstName. The substrings begin with the first character of firstName and the
lengths of the substrings take on all values from 1 to the length of firstName.

b.)Write the UserName method setAvailableUserNames. The method removes from possibleNames all names that are
found in usedNames. These represent user names that have already been assigned in the online system and are
therefore unavailable.
 
import java.util.*;
class UserName
{
ArrayList<String> possibleNames;
 UserName(String firstName, String lastName)
   if (this.isValidName (firstName) && this.isValidName (lastName))
        {
           possibleNames = new ArrayList<String>();
           for (int i = 1; i < firstName.length() + 1; i++)
         {
          possibleNames.add (lastName + firstName.substring (0, i));
        }
        }
        else
        {
          System.out.println("firstName & lastName must contain letters only.");
        }
    }
    public boolean isUsed(String name, String [] arr)
    {
    for (int i = 0; i < arr.length; i++)
        {if (name.equals(arr[i]))
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        public void setAvailableUserNames(String [] usedNames)
        {
            String [] names = new String[this.possibleNames.size()];
            names = this.possibleNames.toArray(names);
            for (int i = 0; i < usedNames.length; i++)
            {
                if (isUsed(usedNames[i], names))
                {
                    int index = this.possibleNames.indexOf(usedNames[i]);
                    this.possibleNames.remove(index);
                    names = new String[this.possibleNames.size()];


Unit 8: 2D Arrays FRQ
 
 a.) Write the getHighestYield method, which returns the Plot object with the highest yield among the plots in
 farmPlots with the crop type specified by the parameter c.If more than one plot has the highest yield, any of 
 these plots may be returned. If no plot exists containing the specified type of crop, the method returns null.
 Write the getHighestYield method below.

class Plot
{
    private String cropType;
    private int cropYield;
    public Plot(String crop, int yield)
    {
    cropType = crop;
    cropYield = yield;
    }
    public String getCropType()
    {
    return cropType;
    }
    public int getCropYield()
    {
        return cropYield;
    }
}
class ExperimentalFarm
{
    private Plot[][] farmPlot;
    public ExperimentalFarm(Plot[][] p)
    {
        farmPlots = p;
    }
     public Plot getHighestYield(String c)
    {
        Plot HighestYieldPlot = null;
        for (int Row = 0; Row < farmPlots(0).length; ++Row)
        {
            for (int Column = 0; Column < farmPlots[0].length; ++Column)
            {
          Plot CurrentPlot = farmPlots[Row][Column];
          if (CurrentPlot.getCropType().equals(c) && (HighestYieldPlot != null ? CurrentPlot.getCropYield() > HighestYieldPlot.getCropYield() : true))
          {
           HighestYieldPlot = CurrentYieldPlot;
         }
            }
        }
        return HighestYieldPlot;
    }
    
 b.) Write the sameCrop method, which returns true if all the plots in a given column of farmPlots grow the same
     crop and returns false otherwise. Write the sameCrop method below.
     
     public boolean sameCrop(int col)
    {
     String CropType = farmPlots[0][col].getCropType();
      for (int Row = 1; Row < farmPlots.length; ++Row)
        {
        if (!farmPlots[Row][col].getCropType().equals(CropType))
            {
             return false;
            }
            }
        return true;
        }
        }
{
    public static void main(String [] args)
    {
        Plot[][] TestPlot = new Plot[][]
        {
         {new Plot(crop "corn", yield 20), new Plot(crop "corn", yield 30), new Plot(crop "peas", yield 10)};
         {new Plot(crop "peas", yield 30), new Plot(crop "corn", yield 40), new Plot(crop "corn", yield 62)};
         {new Plot(crop "wheat", yield 10),new Plot(crop "corn", yield 50), new Plot(crop "rice", yield 30)};
         {new Plot(crop "corn", yield 55), new Plot(crop "corn", yield 30), new Plot(crop "peas", yield 30)};
             };
        ExperimentalFarm TestFarm = new ExperimentalFarm(TestPlot);
        System.out.println(TestFarm.getHighestYield(c: "corn").equals(TestPlot[1][2]));
        System.out.println(TestFarm.getHighestYield(c: "peas").equals(TestPlot[1][0]));
        System.out.println(TestFarm.getHighestYield(c: "bananas") == null);
    }
}
 */

}
